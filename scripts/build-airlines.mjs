import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// OpenFlights airline dataset (CSV; “\N” means null)
const AIRLINES_URL =
  "https://raw.githubusercontent.com/jpatokal/openflights/master/data/airlines.dat";

// Country name normalizations so your comments look neat
function normalizeCountry(name) {
  if (!name) return "";
  const map = {
    "United States": "USA",
    "United Kingdom": "UK",
    "Korea (South)": "South Korea",
    "Korea (North)": "North Korea",
    "Congo (Kinshasa)": "DR Congo",
    "Congo (Brazzaville)": "Congo",
    "Tanzania": "Tanzania",
    "United Arab Emirates": "UAE",
    "Russian Federation": "Russia",
    "Iran": "Iran",
    "Syrian Arab Republic": "Syria",
    "Lao Peoples Democratic Republic": "Laos",
    "Viet Nam": "Vietnam",
  };
  return map[name] ?? name;
}

// Minimal CSV parser for OpenFlights’ simple format
function parseCSV(text) {
  const rows = [];
  let i = 0, field = "", row = [], inQuotes = false;
  const pushField = () => { row.push(field); field = ""; };
  const pushRow = () => { rows.push(row); row = []; };
  while (i < text.length) {
    const c = text[i++];
    if (inQuotes) {
      if (c === '"') {
        if (text[i] === '"') { field += '"'; i++; } else { inQuotes = false; }
      } else field += c;
    } else {
      if (c === '"') inQuotes = true;
      else if (c === ",") pushField();
      else if (c === "\n") { pushField(); pushRow(); }
      else if (c === "\r") { /* ignore */ }
      else field += c;
    }
  }
  if (field.length || row.length) { pushField(); pushRow(); }
  return rows;
}

// Map OpenFlights columns to object
function mapRow(r) {
  // Format: id,name,alias,iata,icao,callsign,country,active
  const name = r[1];
  const iata = r[3];
  const country = r[6];
  const active = r[7];
  return { name, iata, country, active };
}

// Build a default logo path; your seed can override these
function defaultLogoPath(code) {
  return `/assets/img/airlines/${code}.png`;
}

// Comment helpers
const HEADER = `// Auto-generated by scripts/build-airlines.mjs
// Source: OpenFlights airlines.dat (IATA + Active=Y). See https://openflights.org/data.php
// Grouped by country using comment blocks.

export const airlines = [
`;
const FOOTER = `];
`;

function blockComment(line) { return `  // ${line}\n`; }
function toRow({ code, name, logo }) {
  const safe = (s) => s.replace(/'/g, "\\'");
  return `  { code: '${safe(code)}', name: '${safe(name)}', logo: '${safe(logo)}' },\n`;
}

function groupByCountry(list) {
  const byCountry = {};
  for (const a of list) {
    byCountry[a.country] ??= [];
    byCountry[a.country].push(a);
  }
  for (const c of Object.keys(byCountry)) {
    byCountry[c].sort((a,b) =>
      a.name.localeCompare(b.name, "en") || a.code.localeCompare(b.code, "en")
    );
  }
  return byCountry;
}

async function readSeed() {
  const seedPath = path.resolve(__dirname, "../src/data/airlines.seed.js");
  try {
    const mod = await import(seedPath + `?${Date.now()}`); // bust cache
    return Array.isArray(mod.airlines) ? mod.airlines : [];
  } catch {
    return [];
  }
}

async function main() {
  console.log("Downloading airlines.dat …");
  const text = await (await fetch(AIRLINES_URL)).text();
  const rows = parseCSV(text);

  // Filter & map OpenFlights
  const mapped = rows.map(mapRow).filter(Boolean);
  const fromDataset = mapped
    .filter(x => x.active === "Y" && x.iata && x.iata !== "\\N" && x.name && x.country && x.country !== "\\N")
    .map(x => ({
      code: x.iata,
      name: x.name,
      country: normalizeCountry(x.country),
      logo: defaultLogoPath(x.iata),
    }));

  // Seed first (your overrides win), keyed by IATA code
  const seed = await readSeed();
  const byCode = new Map();

  for (const s of seed) {
    if (!s?.code || !s?.name) continue;
    byCode.set(s.code, {
      code: s.code,
      name: s.name,
      // Try to infer country if your seed doesn’t carry one (will be filled from dataset if found)
      country: s.country || "",
      logo: s.logo || defaultLogoPath(s.code),
    });
  }

  // Merge dataset, filling gaps (country, canonical name), and adding missing codes
  for (const d of fromDataset) {
    const existing = byCode.get(d.code);
    if (!existing) {
      byCode.set(d.code, d);
    } else {
      byCode.set(d.code, {
        code: existing.code,
        name: existing.name || d.name,
        country: existing.country || d.country,
        logo: existing.logo || d.logo,
      });
    }
  }

  // Drop any entries without country after merge (to keep grouping clean)
  const merged = [...byCode.values()].filter(x => x.country && x.code);

  // Group
  const grouped = groupByCountry(merged);

  // Emit
  let out = HEADER;
  const countries = Object.keys(grouped).sort((a,b)=>a.localeCompare(b,"en"));
  for (const country of countries) {
    out += blockComment(`-- ${country} --`);
    for (const a of grouped[country]) out += toRow(a);
    out += "\n";
  }
  out += FOOTER;

  const outPath = path.resolve(__dirname, "../src/data/airlines.js");
  await fs.mkdir(path.dirname(outPath), { recursive: true });
  await fs.writeFile(outPath, out, "utf8");
  console.log(`Wrote ${outPath}`);
}

main().catch(err => { console.error(err); process.exit(1); });
